---
export interface Props {
  title: string;
  description: string;
  href: string;
  date?: Date;
  tags?: string[];
  image?: string;
  type?: 'blog' | 'project' | 'interview' | 'experiment';
  lang?: 'zh' | 'en';
}

const {
  title,
  description,
  href,
  date,
  tags = [],
  image,
  type = 'blog',
  lang = 'zh'
} = Astro.props;

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat(lang === 'zh' ? 'zh-CN' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};

const typeColors = {
  blog: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',
  project: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',
  interview: 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400',
  experiment: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400'
};

const typeLabels = {
  zh: {
    blog: '文章',
    project: '项目',
    interview: '访谈',
    experiment: '实验'
  },
  en: {
    blog: 'Blog',
    project: 'Project',
    interview: 'Interview',
    experiment: 'Experiment'
  }
};
---

<article class="group bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 border border-gray-200 dark:border-gray-700 overflow-hidden">
  <a href={href} class="block">
    {image && (
      <div class="aspect-video overflow-hidden">
        <img
          src={image}
          alt={title}
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
          loading="lazy"
        />
      </div>
    )}

    <div class="p-6">
      <div class="flex items-center justify-between mb-3">
        <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${typeColors[type]}`}>
          {typeLabels[lang][type]}
        </span>
        {date && (
          <time class="text-sm text-gray-500 dark:text-gray-400">
            {formatDate(date)}
          </time>
        )}
      </div>

      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
        {title}
      </h3>

      <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
        {description}
      </p>

      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {tags.slice(0, 3).map((tag) => (
            <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
              #{tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400">
              +{tags.length - 3}
            </span>
          )}
        </div>
      )}
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>