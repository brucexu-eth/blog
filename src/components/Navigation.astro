---
export interface Props {
  currentPath?: string;
  lang?: 'zh' | 'en';
}

const { currentPath = '', lang = 'zh' } = Astro.props;

const navItems = {
  zh: [
    { href: '/blog/', label: '首页' },
    { href: '/blog/blog', label: '文章' },
    { href: '/blog/projects', label: '项目' },
    { href: '/blog/interviews', label: '访谈' },
    { href: '/blog/experiments', label: '实验' },
    { href: '/blog/about', label: '关于我' },
  ],
  en: [
    { href: '/blog/en', label: 'Home' },
    { href: '/blog/en/blog', label: 'Blog' },
    { href: '/blog/en/projects', label: 'Projects' },
    { href: '/blog/en/interviews', label: 'Interviews' },
    { href: '/blog/en/experiments', label: 'Experiments' },
    { href: '/blog/en/about', label: 'About' },
  ]
};

const items = navItems[lang];
---

<nav class="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo/Name -->
      <a href={lang === 'en' ? '/blog/en' : '/blog/'} class="font-bold text-xl text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
        Your Name
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {items.map((item) => (
          <a
            href={item.href}
            class={`text-sm font-medium transition-colors hover:text-blue-600 dark:hover:text-blue-400 ${
              currentPath === item.href
                ? 'text-blue-600 dark:text-blue-400'
                : 'text-gray-700 dark:text-gray-300'
            }`}
          >
            {item.label}
          </a>
        ))}

        <!-- Language Toggle -->
        <div class="flex items-center space-x-2">
          <a
            href={currentPath.startsWith('/blog/en') ? currentPath.replace('/blog/en', '/blog') : `/blog/en${currentPath.replace('/blog', '')}`}
            class="text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
          >
            {lang === 'zh' ? 'EN' : '中文'}
          </a>
        </div>

        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
          aria-label="Toggle theme"
        >
          <svg class="w-5 h-5 dark:hidden" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
          </svg>
          <svg class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
        </button>
      </div>

      <!-- Mobile menu button -->
      <button
        id="mobile-menu-button"
        class="md:hidden p-2 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
        aria-label="Toggle menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="hidden md:hidden pb-4">
      <div class="space-y-2">
        {items.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
              currentPath === item.href
                ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'
            }`}
          >
            {item.label}
          </a>
        ))}
        <div class="flex items-center justify-between px-3 py-2">
          <a
            href={currentPath.startsWith('/blog/en') ? currentPath.replace('/blog/en', '/blog') : `/blog/en${currentPath.replace('/blog', '')}`}
            class="text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
          >
            {lang === 'zh' ? 'English' : '中文'}
          </a>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;

  // Check for saved theme preference or default to 'light'
  const currentTheme = localStorage.getItem('theme') || 'light';
  html.classList.toggle('dark', currentTheme === 'dark');

  themeToggle?.addEventListener('click', () => {
    const isDark = html.classList.contains('dark');
    html.classList.toggle('dark', !isDark);
    localStorage.setItem('theme', isDark ? 'light' : 'dark');
  });

  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });
</script>